@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Microsoft.JSInterop.IJSRuntime JS
@inject IHttpClientFactory httpFactory

<div class="SnorkelOverviewContainer">
    <div class="FilterSection">

    </div>
    <div class="OverviewSection">
        @if (snorkels != null)
        {
            foreach (var snorkel in snorkels)
            {
                <section class="snorkleSection" @onclick="async() => await pinMap.NavigateToPin(snorkel.Lattitude, snorkel.Longitude)">
                    <p>@snorkel.Name</p>
                    <div style="display: flex;">
                        <img src="/thumbs-up.png" style="margin-right: 5px;"/>
                        <p>@snorkel.SnorkelSupports.Count</p>
                    </div>                 
                </section>
            }
        }
    </div>
    <div class="CreateSnorkelSection">
        <AuthorizeView>
            <Authorized>
                <div class="CreateSnorkelDisplay">
                    <h3>Create a Snorkel</h3>
                    <div class="CreateSnorkelIcon" @onclick="() => NavigateToCreateSnorkelPage()">
                        <img src="/plus.png" />
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <a href="authentication/login">Log in to create a Snorkel</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code{
    [Parameter]
    public PinMap.PinMap<Snorkel> pinMap { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    [CascadingParameter]
    public IModalService Modal { get; set; }

    List<Snorkel> snorkels;
    protected override async Task OnInitializedAsync()
    {
        snorkels = await httpFactory.CreateClient("UnauthenticatedHttpClient").GetFromJsonAsync<List<Snorkel>>("/api/snorkel");
    }
    private void NavigateToCreateSnorkelPage()
    {
        navigationManager.NavigateTo("/createsnorkel");
    }
}
