@inject HttpClient httpClient

<div class="card">
    <div class="card-body">
        <div class="ImageContainer">
            @if (base64Local?.Length > 0)
            {
                <img src="@base64LocalImage(base64Local)" />
            }
            else
            {
                <h3>Upload an image <br /> to create a snorkel!</h3>
            }
        </div>
        <label for="inputFile">@(base64Local == null ? "Upload Image" : "Change Image")</label>
        <InputFile style="display: none;" id="inputFile" OnChange="async (inputArgs) => await AnalyzeImageAsync(inputArgs)" />
    </div>
    @foreach (var port in Node.Ports)
    {
        <PortRenderer Port="port" />
    }
</div>


@code{
    [Parameter]
    public ImageNode Node { get; set; }

    private List<DetectedObject> detectedObjects;
    private AzureCognitiveServiceRoot coginitiveServicesDetectResult;
    private string base64Local;
    private string base64LocalImage(string base64) => $"data:image/jpg;base64,{base64}";

    private async Task AnalyzeImageAsync(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        base64Local = Convert.ToBase64String(ms.ToArray());
        Image image = new Image() { Base64Data = base64Local };
        HttpResponseMessage hrm = await httpClient.PostAsJsonAsync<Image>("api/imageanalysis", image);
        coginitiveServicesDetectResult = JsonSerializer.Deserialize<AzureCognitiveServiceRoot>(await hrm.Content.ReadAsStringAsync(), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        
    }

    private class DetectedObject
    {
        public decimal PercentageX { get; set; }
        public decimal PercentageY { get; set; }
        public decimal Height { get; set; }
        public decimal Width { get; set; }
        public bool Shown { get; set; }
    }
}