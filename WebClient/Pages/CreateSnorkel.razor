@page "/createsnorkel"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="CreateSnorkelContainer">
    <div class="TitleSection">
        <h3>Create and configure a new snorkel!</h3>
    </div>
    <div class="SnorkelConfigurationContainer">
        <aside>
            @foreach (var item in configurationInfos)
            {
                <section draggable="true" @ondragstart="() => DragStart(item)">
                    @item.NameOfType
                </section>
            }
        </aside>
        <div class="DiagramContainer" ondragover="event.preventDefault();" dropzone @ondrop="OnDrop">
            <CascadingValue Value="diagram">
                <DiagramCanvas></DiagramCanvas>
            </CascadingValue>
        </div>
    </div>
</div>


@code{
    private List<ConfigurationInfo> configurationInfos;
    private ConfigurationInfo draggedConfigurationInfo;
    private Diagram diagram;
    protected override async Task OnInitializedAsync()
    {
        configurationInfos = new List<ConfigurationInfo>
        {
            new ConfigurationInfo
            {
                NameOfType = "Coordinates"
            },
            new ConfigurationInfo
            {
                NameOfType = "History"
            },
            new ConfigurationInfo
            {
                NameOfType = "Activity"
            },
            new ConfigurationInfo
            {
                NameOfType = "Description"
            }
        };
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "white"
            }
        };
        diagram = new Diagram(options);
        diagram.RegisterModelComponent<CoordinatesNode, CoordinatesComponent>();
        diagram.RegisterModelComponent<ImageNode, ImageComponent>();
        diagram.RegisterModelComponent<HistoryInfoNode, HistoryInfoComponent>();
        diagram.RegisterModelComponent<ActivityInfoNode, ActivityInfoComponent>();
        diagram.RegisterModelComponent<DescriptionInfoNode, DescriptionInfoComponent>();
        diagram.Nodes.Add(new ImageNode(new Point(300, 300)));
        StateHasChanged();
    }

    public void OnDrop(DragEventArgs e)
    {
        var position = diagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
        Point point = new Point(position.X, position.Y);
        NodeModel nodeModel = draggedConfigurationInfo.NameOfType switch
        {
            "Coordinates" => new CoordinatesNode(point),
            "History" => new HistoryInfoNode(point),
            "Activity" => new ActivityInfoNode(point),
            "Description" => new DescriptionInfoNode(point)
        };
        diagram.Nodes.Add(nodeModel);
        draggedConfigurationInfo = null;
    }
    public void DragStart(ConfigurationInfo configurationInfo)
    {
        draggedConfigurationInfo = configurationInfo;
    }
}
