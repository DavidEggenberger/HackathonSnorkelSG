@page "/createsnorkel"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<CascadingValue Value="update">
    <div class="CreateSnorkelContainer">
        <div class="TitleSection">
            <h3>Create and configure a new snorkel!</h3>
            @if (snorkelInConfiguration.Image.Base64Data is not null)
            {
                <button @onclick="async() => await CreateSnorkelAsync()">Create Snorkel!</button>
            }
        </div>
        <div class="SnorkelConfigurationContainer">
            <aside>
                @foreach (var item in configurationInfos)
                {
                    <section draggable="true" @ondragstart="() => DragStart(item)">
                        <div>
                            <h3>@item.NameOfType</h3>
                            <h8>@item.Description</h8>
                        </div>
                        <img src="@item.IconUri" />
                    </section>
                }
            </aside>
            <div class="DiagramContainer" ondragover="event.preventDefault();" dropzone @ondrop="OnDrop">
                <CascadingValue Value="diagram">
                    <DiagramCanvas></DiagramCanvas>
                </CascadingValue>
            </div>
        </div>
    </div>
</CascadingValue>



@code{
    public Action update;
    private Snorkel snorkelInConfiguration;
    private List<ConfigurationInfo> configurationInfos;
    private ConfigurationInfo draggedConfigurationInfo;
    private Diagram diagram;
    protected override async Task OnInitializedAsync()
    {
        update = () => this.StateHasChanged();
        snorkelInConfiguration = new Snorkel()
        {
            DescriptionInfos = new List<DescriptionInfo>(),
            ActivityInfos = new List<ActivityInfo>(),
            HistoryInfos = new List<HistoryInfo>(),
            Image = new Image()
        };
        configurationInfos = new List<ConfigurationInfo>
        {
            new ConfigurationInfo
            {
                NameOfType = "Coordinates",
                Description = "The coordinates where your snorkel can be found",
                IconUri = "/globe.png"
            },
            new ConfigurationInfo
            {
                NameOfType = "History",
                Description = "History that can be explored at your snorkel",
                IconUri = "/history.png"
            },
            new ConfigurationInfo
            {
                NameOfType = "Activity",
                Description = "Activities that can be done at the snorkel",
                IconUri = "/stretching.png"
            },
            new ConfigurationInfo
            {
                NameOfType = "Description",
                Description = "General facts you find interesting at the snorkel",
                IconUri = "/description.png"
            }
        };
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "white"
            }
        };
        diagram = new Diagram(options);
        diagram.RegisterModelComponent<CoordinatesNode, CoordinatesComponent>();
        diagram.RegisterModelComponent<ImageNode, ImageComponent>();
        diagram.RegisterModelComponent<HistoryInfoNode, HistoryInfoComponent>();
        diagram.RegisterModelComponent<ActivityInfoNode, ActivityInfoComponent>();
        diagram.RegisterModelComponent<DescriptionInfoNode, DescriptionInfoComponent>();
        diagram.Nodes.Add(new ImageNode(new Point(300, 300)) { SnorkelInConfiguration = snorkelInConfiguration });
        StateHasChanged();
    }

    public void OnDrop(DragEventArgs e)
    {
        var position = diagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
        Point point = new Point(position.X, position.Y);
        NodeModel nodeModel = draggedConfigurationInfo.NameOfType switch
        {
            "Coordinates" => new CoordinatesNode(point) { SnorkelInConfiguration = snorkelInConfiguration },
            "History" => new HistoryInfoNode(point) { SnorkelInConfiguration = snorkelInConfiguration },
            "Activity" => new ActivityInfoNode(point) { SnorkelInConfiguration = snorkelInConfiguration },
            "Description" => new DescriptionInfoNode(point) { SnorkelInConfiguration = snorkelInConfiguration }
        };
        diagram.Nodes.Add(nodeModel);
        draggedConfigurationInfo = null;
    }
    public void DragStart(ConfigurationInfo configurationInfo)
    {
        draggedConfigurationInfo = configurationInfo;
    }
    public async Task CreateSnorkelAsync()
    {
        await httpClient.PostAsJsonAsync<Snorkel>("/api/snorkel", snorkelInConfiguration);
    }
}
