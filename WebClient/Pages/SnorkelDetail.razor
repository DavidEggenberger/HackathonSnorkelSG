@page "/snorkeldetail/{SnorkelId:guid}"
@inject HttpClient httpClient
@inject IHttpClientFactory htpFactory
@inject NavigationManager navManager

<div class="SnorkelDetailContainer">
    <div class="titleSection">
        <h2>Explore @snorkel?.Name</h2>
        <AuthorizeView>
            @if (context.User.Claims.First(s => s.Type == "sub")?.Value == snorkel?.ApplicationUserId)
            {
                <button @onclick="async() => await DeleteSnorkel()">Delete Snorkel</button>
            }
        </AuthorizeView>
        <button @onclick='() => navManager.NavigateTo("/")'>Back to HomePage</button>
    </div>
    <div class="DiagramContainer">
        <CascadingValue Value="diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>
</div>

@code{
    [Parameter]
    public Guid SnorkelId { get; set; }
    private Snorkel snorkel;
    private Diagram diagram;
    protected override async Task OnInitializedAsync()
    {
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "white"
            }
        };
        diagram = new Diagram(options);
        snorkel = await htpFactory.CreateClient("UnauthenticatedHttpClient").GetFromJsonAsync<Snorkel>($"/api/snorkel/{SnorkelId}");

        diagram.RegisterModelComponent<DirectionDisplayNode, DirectionDisplayComponent>();
        diagram.RegisterModelComponent<StreetViewDisplayNode, StreetViewDisplayComponent>();
        diagram.RegisterModelComponent<ImageNodeDisplay, ImageComponentDisplay>();
        diagram.RegisterModelComponent<HistoryInfoNodeDisplay, HistoryInfoComponentDisplay>();
        diagram.RegisterModelComponent<ActivityInfoNodeDisplay, ActivityInfoComponentDisplay>();
        diagram.RegisterModelComponent<DescriptionInfoNodeDisplay, DescriptionInfoComponentDisplay>();

        diagram.Nodes.Add(new ImageNodeDisplay(new Point((diagram.Container.Width / 2) - 120, (diagram.Container.Height / 2) - 120)) { Snorkel = snorkel });
        diagram.Nodes.Add(new StreetViewDisplayNode(new Point((diagram.Container.Width - 200) - 120, (diagram.Container.Height / 2))) { Snorkel = snorkel });
        diagram.Nodes.Add(new DirectionDisplayNode(new Point(50, 50)) { Snorkel = snorkel });

        foreach (var item in snorkel.HistoryInfos)
        {
            diagram.Nodes.Add(new HistoryInfoNodeDisplay());
        }
        foreach (var item in snorkel.ActivityInfos)
        {
            diagram.Nodes.Add(new ActivityInfoNodeDisplay());
        }
        foreach (var item in snorkel.DescriptionInfos)
        {
            diagram.Nodes.Add(new DescriptionInfoNode());
        }

        StateHasChanged();
    }
    public async Task DeleteSnorkel()
    {
        await httpClient.DeleteAsync($"/api/snorkel/{snorkel.Id}");
        navManager.NavigateTo("/");
    }
}
